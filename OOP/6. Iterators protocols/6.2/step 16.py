"""
https://stepik.org/lesson/805785/step/16?unit=816644

Класс PermaDict
Реализуйте класс PermaDict, описывающий словарь, который позволяет добавлять и удалять пары (<ключ>, <значение>), но не позволяет изменять значения по уже имеющимся ключам. При создании экземпляра класс должен принимать один аргумент:

data — словарь, определяющий начальный набор элементов экземпляра класса PermaDict. Если не передан, начальный набор элементов считается пустым
Класс PermaDict должен иметь три метода экземпляра:

keys() — метод, возвращающий итерируемый объект, элементами которого являются ключи экземпляра класса PermaDict
values() — метод, возвращающий итерируемый объект, элементами которого являются значения ключей экземпляра класса PermaDict
items() — метод, возвращающий итерируемый объект элементами которого являются элементы экземпляра класса PermaDict в виде кортежей (<ключ>, <значение>)
При передаче экземпляра класса PermaDict в функцию len() должно возвращаться количество элементов в нем.

Также экземпляр класса PermaDict должен быть итерируемым объектом, то есть позволять перебирать свои ключи, например, с помощью цикла for.

Наконец, экземпляр класса PermaDict должен позволять получать значения своих элементов по их ключам, добавлять новые пары (ключ, значение) и удалять уже имеющиеся с помощью оператора del. При этом изменение значений по уже имеющимся ключам должно быть недоступно, и при попытке выполнения такой операции должно возбуждаться исключение KeyError с текстом:

Изменение значения по ключу невозможно
Примечание 1. Экземпляр класса PermaDict не должен зависеть от словаря, на основе которого он был создан. Другими словами, если исходный словарь изменится, то экземпляр класса PermaDict измениться  не должен.
"""

class PermaDict:

    def __init__(self, data=()):
        self.data = dict(data) or {}

    def keys(self):
        yield from self.data.keys()

    def values(self):
        yield from self.data.values()

    def items(self):
        yield from self.data.items()

    def __len__(self):
        return len(self.data)

    def __iter__(self):
        yield from self.data

    def __getitem__(self, item):
        return self.data[item]

    def __setitem__(self, key, value):
        if key not in self.data:
            self.data[key] = value
        else:
            raise KeyError('Изменение значения по ключу невозможно')

    def __delitem__(self, key):
        del self.data[key]

