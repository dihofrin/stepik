"""
https://stepik.org/lesson/798678/step/17?unit=801641

Классы WeatherWarning и WeatherWarningWithDate
Реализуйте класс WeatherWarning, описывающий объект, предупреждающий о погодных изменениях. При создании экземпляра класс не должен принимать никаких аргументов.

Класс WeatherWarning должен иметь три метода экземпляра:

rain() — метод, выводящий текст:
Ожидаются сильные дожди и ливни с грозой
snow() — метод, выводящий текст:
Ожидается снег и усиление ветра
low_temperature() — метод, выводящий текст:
Ожидается сильное понижение температуры
Также реализуйте класс WeatherWarningWithDate, наследника класса WeatherWarning, описывающий объект, предупреждающий о погодных изменениях с указанием даты. Процесс создания экземпляра класса WeatherWarningWithDate должен совпадать с процессом создания экземпляра класса WeatherWarning.

Класс WeatherWarningWithDate должен иметь три метода экземпляра:

rain() — метод, принимающий в качестве аргумента дату (тип date) и выводящий текст:
<дата в формате DD.MM.YYYY>
Ожидаются сильные дожди и ливни с грозой
snow() — метод, принимающий в качестве аргумента дату (тип date) и выводящий текст:
<дата в формате DD.MM.YYYY>
Ожидается снег и усиление ветра
low_temperature() — метод, принимающий в качестве аргумента дату (тип date) и выводящий текст:
<дата в формате DD.MM.YYYY>
Ожидается сильное понижение температуры
"""

class WeatherWarning:

     def rain(self):
         print('Ожидаются сильные дожди и ливни с грозой')

     def snow(self):
         print('Ожидается снег и усиление ветра')

     def low_temperature(self):
         print('Ожидается сильное понижение температуры')

class WeatherWarningWithDate(WeatherWarning):
    def rain(self, d):
        print(f'{d.strftime("%d.%m.%Y")}\nОжидаются сильные дожди и ливни с грозой')

    def snow(self, d):
        print(f'{d.strftime("%d.%m.%Y")}\nОжидается снег и усиление ветра')

    def low_temperature(self, d):
        print(f'{d.strftime("%d.%m.%Y")}\nОжидается сильное понижение температуры')

