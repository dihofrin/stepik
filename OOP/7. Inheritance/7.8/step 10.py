"""https://stepik.org/lesson/804638/step/10?unit=807762

Классы Item и ShoppingCart
1. Реализуйте класс Item, описывающий товар. При создании экземпляра класс должен принимать два аргумента в следующем порядке:

name — название товара
price — цена товара в долларах
Экземпляр класса Item должен иметь следующее неформальное строковое представление:

<название товара>, <цена товара>$
2. Также реализуйте класс ShoppingCart, описывающий корзину для покупок. При создании экземпляра класс должен принимать один аргумент:

items — итерируемый объект, определяющий начальный набор товаров в корзине. Если не передан, корзина считается пустой
Класс ShoppingCart должен иметь три метода экземпляра:

add() — метод, принимающий в качестве аргумента товар и добавляющий его в корзину
total() — метод, возвращающий суммарную стоимость всех товаров в корзине
remove() — метод, принимающий в качестве аргумента название товара и удаляющий его из корзины. Если в корзине несколько товаров с указанным именем, они должны быть удалены все
Экземпляр класса ShoppingCart должен иметь следующее неформальное строковое представление:

<название первого товара в корзине>, <цена первого товара в корзине>$
<название второго товара в корзине>, <цена второго товара в корзине>$
...
Примечание 1. Если корзина для покупок пуста, то ее неформальным строковым представлением должна быть пустая строка.
"""

class Item:

    def __init__(self, name, price):
        self.name = name
        self.price = price

    def __str__(self):
        return f'{self.name}, {self.price}$'


class ShoppingCart:

    def __init__(self, items=()):
        self.items = list(items)

    def add(self, item):
        self.items.append(item)

    def total(self):
        return sum(item.price for item in self.items)

    def remove(self, name):
        self.items = [item for item in self.items if item.name != name]

    def __str__(self):
        return '\n'.join(str(item) for item in self.items)
