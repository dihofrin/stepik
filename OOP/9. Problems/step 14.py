"""
https://stepik.org/lesson/864077/step/14?unit=923013

–î–µ–∫–æ—Ä–∞—Ç–æ—Ä @predicate üå∂Ô∏èüå∂Ô∏è
–ü—Ä–µ–¥–∏–∫–∞—Ç ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –∏–ª–∏ False –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.

–†–µ–∞–ª–∏–∑—É–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @predicate, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∑–≤–æ–ª—è—Ç—å —É–¥–æ–±–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–∏–∫–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ &, | –∏ ~:

@predicate
def is_even(num):
    return num % 2 == 0

@predicate
def is_positive(num):
    return num > 0

print((is_even & is_positive)(4))             # True; —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ is_even(4) and is_positive(4)
print((is_even & is_positive)(3))             # False; —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ is_even(3) and is_positive(3)
print((is_even | is_positive)(3))             # True; —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ is_even(3) or is_positive(3)
print((~is_even & is_positive)(3))            # True; —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ not is_even(3) and is_positive(3)
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º–∏ –ø—Ä–µ–¥–∏–∫–∞—Ç–∞–º–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, —Å–∫–æ–ª—å–∫–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ–Ω–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç:

@predicate
def to_be():
    return True

print((to_be | ~to_be)())                     # True; —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ to_be() or not to_be()

@predicate
def is_equal(a, b):
    return a == b

@predicate
def is_less_than(a, b):
    return a < b

print((is_less_than | is_equal)(1, 2))        # True; —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ is_less_than(1, 2) or is_equal(1, 2)
–¢–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Ç–∞–∫ –∏ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ:

print((is_less_than | is_equal)(2, b=2))      # True; —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ is_less_than(2, b=2) or is_equal(2, b=2)
print((is_less_than | is_equal)(a=3, b=2))    # False; —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ is_less_than(a=3, b=2) or is_equal(a=3, b=2)
–ó–∞–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–Ω–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –≤–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:

@predicate
def is_less_than(a, b):
    return a < b

print(is_less_than(1, 2))                     # True
print(is_less_than(2, 2))                     # False
print(is_less_than(3, 2))                     # False
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã.
"""

class predicate:

    def __init__(self, func):
        self.func = func

    def __call__(self, *args, **kwargs):
        return self.func(*args, **kwargs)

    def __and__(self, other):
        return type(self)(lambda *args, **kwargs: self(*args, **kwargs) and other(*args, **kwargs))

    def __or__(self, other):
        return type(self)(lambda *args, **kwargs: self(*args, **kwargs) or other(*args, **kwargs))

    def __invert__(self):
        return type(self)(lambda *args, **kwargs: not self(*args, **kwargs))