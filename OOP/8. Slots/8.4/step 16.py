"""
https://stepik.org/lesson/808351/step/16?auth=login&unit=811596

Декоратор @type_check
Реализуйте класс декоратор @type_check, который принимает один аргумент:

types — список, элементами которого являются типы данных
Декоратор должен проверять, что типы всех позиционных аргументов, передаваемых в декорируемую функцию, полностью сопоставляются с типами из списка types, то есть типом первого аргумента является первый элемент списка types, типом второго аргумента — второй элемент списка types, и так далее. Если данное условие не выполняется, должно быть возбуждено исключение TypeError.

Если количество позиционных аргументов больше, чем количество элементов в списке types, то не сопоставляемые аргументы не должны учитываться при проверке. Если количество позиционных аргументов меньше чем количество элементов в списке types, то не сопоставляемые типы из списка types не должны учитываться при проверке.
"""

from functools import wraps

class type_check:

    def __init__(self, types):
        self.types = types

    def __call__(self, func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            if not all(type(arg) == t for arg, t in zip(args, self.types)):
                raise TypeError
            value = func(*args, **kwargs)
            return value
        return wrapper
